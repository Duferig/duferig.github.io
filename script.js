// --- –≠–ª–µ–º–µ–Ω—Ç—ã DOM ---
const balanceDisplay = document.getElementById('balance');
const betInput = document.getElementById('bet-amount');
const spinButton = document.getElementById('spin-button');
const reelsContainer = document.querySelector('.reels');
const messageDisplay = document.getElementById('message');

// --- –ó–≤—É–∫–∏ ---
const spinSound = document.getElementById('spin-sound');
const winSound = document.getElementById('win-sound');
const loseSound = document.getElementById('lose-sound');
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞
function playSound(sound) {
    if (sound && typeof sound.play === 'function') {
        sound.currentTime = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –Ω–∞—á–∞–ª–æ
        sound.play().catch(error => console.log("–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:", error));
    }
}

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–≥—Ä—ã ---
const SYMBOLS = { // –ò–º–µ–Ω–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    CHERRY: 'üçí', LEMON: 'üçã', ORANGE: 'üçä',
    GRAPE: 'üçá', BELL: 'üîî', STAR: '‚≠ê', SEVEN: '7Ô∏è‚É£'
};

// ########## –ë–õ–û–ö –° –ò–ó–ú–ï–ù–ï–ù–ù–´–ú–ò –õ–ï–ù–¢–ê–ú–ò –î–õ–Ø –ß–ê–°–¢–´–• –ö–û–ú–ë–ò–ù–ê–¶–ò–ô ##########
// –õ–µ–Ω—Ç—ã –±–∞—Ä–∞–±–∞–Ω–æ–≤ –¥–ª—è –±–æ–ª–µ–µ —á–∞—Å—Ç–æ–≥–æ –≤—ã–ø–∞–¥–µ–Ω–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π (–æ—Å–æ–±–µ–Ω–Ω–æ üçí)
const REEL_STRIPS = [
    [ // –ë–∞—Ä–∞–±–∞–Ω 1 (–û—á–µ–Ω—å –º–Ω–æ–≥–æ üçí, —É–º–µ—Ä–µ–Ω–Ω–æ üçã, üçä) - –î–ª–∏–Ω–∞ 20
        SYMBOLS.CHERRY, SYMBOLS.LEMON, SYMBOLS.CHERRY, SYMBOLS.ORANGE, SYMBOLS.CHERRY,
        SYMBOLS.GRAPE,  SYMBOLS.LEMON, SYMBOLS.CHERRY, SYMBOLS.BELL,   SYMBOLS.CHERRY,
        SYMBOLS.LEMON,  SYMBOLS.CHERRY, SYMBOLS.ORANGE, SYMBOLS.CHERRY, SYMBOLS.LEMON,
        SYMBOLS.GRAPE,  SYMBOLS.CHERRY, SYMBOLS.ORANGE, SYMBOLS.BELL,   SYMBOLS.CHERRY // ‚≠ê –∏ 7Ô∏è‚É£ —É–±—Ä–∞–Ω—ã —Å 1-–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞
    ],
    [ // –ë–∞—Ä–∞–±–∞–Ω 2 (–û—á–µ–Ω—å –º–Ω–æ–≥–æ üçí, –µ—Å—Ç—å —Ä–µ–¥–∫–∏–µ ‚≠ê –∏ 7Ô∏è‚É£) - –î–ª–∏–Ω–∞ 20
        SYMBOLS.CHERRY, SYMBOLS.BELL,   SYMBOLS.CHERRY, SYMBOLS.LEMON, SYMBOLS.CHERRY,
        SYMBOLS.ORANGE, SYMBOLS.CHERRY, SYMBOLS.GRAPE,  SYMBOLS.LEMON, SYMBOLS.CHERRY,
        SYMBOLS.STAR,   SYMBOLS.CHERRY, SYMBOLS.LEMON, SYMBOLS.BELL,  SYMBOLS.CHERRY,
        SYMBOLS.ORANGE, SYMBOLS.GRAPE,  SYMBOLS.CHERRY, SYMBOLS.LEMON, SYMBOLS.SEVEN // ‚≠ê –∏ 7Ô∏è‚É£ –æ—á–µ–Ω—å —Ä–µ–¥–∫–∏–µ
    ],
    [ // –ë–∞—Ä–∞–±–∞–Ω 3 (–û—á–µ–Ω—å –º–Ω–æ–≥–æ üçí, –µ—Å—Ç—å —Ä–µ–¥–∫–∏–µ ‚≠ê –∏ 7Ô∏è‚É£) - –î–ª–∏–Ω–∞ 20
        SYMBOLS.CHERRY, SYMBOLS.ORANGE, SYMBOLS.CHERRY, SYMBOLS.LEMON, SYMBOLS.GRAPE,
        SYMBOLS.CHERRY, SYMBOLS.LEMON,  SYMBOLS.BELL,   SYMBOLS.CHERRY, SYMBOLS.ORANGE,
        SYMBOLS.LEMON,  SYMBOLS.CHERRY, SYMBOLS.GRAPE,  SYMBOLS.CHERRY, SYMBOLS.SEVEN, // ‚≠ê —É–±—Ä–∞–Ω–∞
        SYMBOLS.BELL,   SYMBOLS.CHERRY, SYMBOLS.LEMON,  SYMBOLS.ORANGE, SYMBOLS.CHERRY
    ]
];
// #######################################################################

const REEL_COUNT = 3;
const SYMBOLS_VISIBLE = 1; // –í–∏–¥–µ–Ω —Ç–æ–ª—å–∫–æ 1 —Å–∏–º–≤–æ–ª
const LINES_TO_CHECK = 1; // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ 1 –ª–∏–Ω–∏—é
const MIDDLE_LINE_INDEX = 0; // –ò–Ω–¥–µ–∫—Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–∏–¥–∏–º–æ–π –ª–∏–Ω–∏–∏
// –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –≤—ã–∏–≥—Ä—ã—à–∞
const WIN_MULTIPLIERS = {
    [SYMBOLS.CHERRY]: 5, [SYMBOLS.LEMON]: 8, [SYMBOLS.ORANGE]: 10,
    [SYMBOLS.GRAPE]: 15, [SYMBOLS.BELL]: 20, [SYMBOLS.STAR]: 30,
    [SYMBOLS.SEVEN]: 50
};

let currentBalance = 1000;
let currentBet = parseInt(betInput.value);
let isSpinning = false;

// --- –§—É–Ω–∫—Ü–∏–∏ ---

// –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
function getSymbolHeight() {
    const cssVar = getComputedStyle(document.documentElement).getPropertyValue('--symbol-container-height');
    if (cssVar) return parseInt(cssVar, 10);
    return 80; // Default
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞—Ä–∞–±–∞–Ω–æ–≤
function createReels() {
    reelsContainer.innerHTML = '';
    const symbolHeight = getSymbolHeight();
    for (let i = 0; i < REEL_COUNT; i++) {
        const reelElement = document.createElement('div');
        reelElement.classList.add('reel');
        const symbolContainer = document.createElement('div');
        symbolContainer.classList.add('reel-symbols');
        const initialSymbols = getSymbolsFromStrip(i, 0, REEL_STRIPS[i].length);
        fillReel(symbolContainer, initialSymbols);
        reelElement.appendChild(symbolContainer);
        reelsContainer.appendChild(reelElement);
        const initialTranslateY = 0;
        symbolContainer.style.transition = 'none';
        symbolContainer.style.transform = `translateY(${initialTranslateY}px)`;
    }
}

// –ó–∞–ø–æ–ª–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–∏–º–≤–æ–ª–∞–º–∏
function fillReel(symbolContainer, symbols) {
    symbolContainer.innerHTML = '';
    const symbolHeight = getSymbolHeight();
    symbols.forEach(symbol => {
        const symbolDiv = document.createElement('div');
        symbolDiv.textContent = symbol;
        symbolDiv.style.height = `${symbolHeight}px`;
        symbolContainer.appendChild(symbolDiv);
    });
}

// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ä–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –ª–µ–Ω—Ç—ã –±–∞—Ä–∞–±–∞–Ω–∞ —Å –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ–º
function getSymbolsFromStrip(reelIndex, startIndex, count) {
    const strip = REEL_STRIPS[reelIndex];
    const stripLength = strip.length;
    const symbols = [];
    for (let i = 0; i < count; i++) {
        const index = (startIndex + i) % stripLength;
        symbols.push(strip[index]);
    }
    return symbols;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –≤—ã–∏–≥—Ä—ã—à–∞
function clearEffects() {
    reelsContainer.querySelectorAll('.winning-symbol').forEach(el => {
        el.classList.remove('winning-symbol');
    });
    messageDisplay.classList.remove('flash');
}

// –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
async function spinReels() {
    if (isSpinning) return;
    isSpinning = true;
    spinButton.disabled = true;
    messageDisplay.textContent = '';
    messageDisplay.className = 'message';
    clearEffects(); // –û—á–∏—â–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –≤—ã–∏–≥—Ä—ã—à–∞

    playSound(spinSound);

    const symbolHeight = getSymbolHeight();
    const reels = Array.from(reelsContainer.querySelectorAll('.reel'));
    const finalResults = []; // –ë—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ 1 —Å–∏–º–≤–æ–ª—É –Ω–∞ –±–∞—Ä–∞–±–∞–Ω

    const spinPromises = reels.map(async (reel, i) => {
        const symbolContainer = reel.querySelector('.reel-symbols');
        const strip = REEL_STRIPS[i];
        const stripLength = strip.length;
        const randomStopIndex = Math.floor(Math.random() * stripLength);

        const finalVisibleSymbol = getSymbolsFromStrip(i, randomStopIndex, 1)[0];
        finalResults[i] = [finalVisibleSymbol];

        const symbolsForAnimation = getSymbolsFromStrip(i, 0, stripLength);
        fillReel(symbolContainer, symbolsForAnimation);

        symbolContainer.style.transition = 'none';
        const startTranslateY = symbolHeight;
        symbolContainer.style.transform = `translateY(${startTranslateY}px)`;

        await new Promise(resolve => requestAnimationFrame(() => setTimeout(resolve, 0)));

        const animationDuration = 1 + i * 0.3;
        symbolContainer.style.transition = `transform ${animationDuration}s cubic-bezier(0.25, 1, 0.5, 1)`;
        const targetTranslateY = -randomStopIndex * symbolHeight;
        symbolContainer.style.transform = `translateY(${targetTranslateY}px)`;

        await new Promise(resolve => setTimeout(resolve, animationDuration * 1000));
        return finalVisibleSymbol;
    });

    await Promise.all(spinPromises);

    checkWin(finalResults); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à

    isSpinning = false;
    spinButton.disabled = currentBalance < currentBet;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞ (–∏–Ω–¥–µ–∫—Å 0 –¥–ª—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏)
function checkWin(finalReels) {
    // finalReels —Ç–µ–ø–µ—Ä—å –≤–∏–¥–∞ [[s1], [s2], [s3]]
    let totalWinnings = 0;
    const symbol1 = finalReels[0][0]; // –ò–Ω–¥–µ–∫—Å 0 - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–∏–¥–∏–º—ã–π —Å–∏–º–≤–æ–ª
    const symbol2 = finalReels[1][0];
    const symbol3 = finalReels[2][0];

    if (symbol1 === symbol2 && symbol2 === symbol3) {
        // –í—ã–∏–≥—Ä—ã—à!
        const multiplier = WIN_MULTIPLIERS[symbol1] || 0;
        totalWinnings = currentBet * multiplier;
        currentBalance += totalWinnings; // –î–æ–±–∞–≤–ª—è–µ–º —á–∏—Å—Ç—ã–π –≤—ã–∏–≥—Ä—ã—à

        messageDisplay.textContent = `–í–´–ò–ì–†–´–®: ${symbol1} x 3 = ${totalWinnings.toFixed(0)} ‚ÇΩ!`;
        messageDisplay.classList.add('win', 'flash');
        playSound(winSound);

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –ï–î–ò–ù–°–¢–í–ï–ù–ù–û–ì–û –≤–∏–¥–∏–º–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        const reels = reelsContainer.querySelectorAll('.reel');
        reels.forEach((reel, reelIndex) => {
             const symbolContainer = reel.querySelector('.reel-symbols');
             const symbolElements = symbolContainer.querySelectorAll('div');
             const symbolHeight = getSymbolHeight();
             const currentTranslateY = parseFloat(window.getComputedStyle(symbolContainer).transform.split(',')[5] || '0');
             const visibleDomIndex = Math.round(-currentTranslateY / symbolHeight);

             if (symbolElements[visibleDomIndex]) {
                 symbolElements[visibleDomIndex].classList.add('winning-symbol');
             } else {
                  console.error(`–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏: reel ${reelIndex}, index ${visibleDomIndex}`);
             }
        });

        setTimeout(clearEffects, 1500);

    } else {
        // –ü—Ä–æ–∏–≥—Ä—ã—à
        messageDisplay.textContent = '–•—É–π —Ç–µ–±–µ,–∞ –≤—ã–∏–≥—Ä—ã—à!';
        messageDisplay.classList.add('lose');
        // playSound(loseSound);
    }

    balanceDisplay.textContent = Math.floor(currentBalance);
    if (currentBalance < currentBet) {
        spinButton.disabled = true;
        if (totalWinnings === 0) {
            messageDisplay.textContent += ' –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!';
        }
    }
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ---
spinButton.addEventListener('click', () => {
    if (isSpinning) return;
    currentBet = parseInt(betInput.value);
    if (isNaN(currentBet) || currentBet < 1) {
         messageDisplay.textContent = `–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 1 ‚ÇΩ`;
         messageDisplay.className = 'message lose';
         betInput.value = 1;
         currentBet = 1;
         spinButton.disabled = currentBalance < currentBet;
         return;
    }
    if (currentBalance >= currentBet) {
        currentBalance -= currentBet;
        balanceDisplay.textContent = Math.floor(currentBalance);
        spinReels();
    } else {
        messageDisplay.textContent = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!';
        messageDisplay.className = 'message lose';
    }
});

betInput.addEventListener('input', () => {
     let newBet = parseInt(betInput.value);
     if (isNaN(newBet)) newBet = 0;
     spinButton.disabled = isSpinning || (currentBalance < newBet) || newBet < 1;
});

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ---
balanceDisplay.textContent = currentBalance;
betInput.min = 1;
betInput.step = 1;
betInput.value = 1;
currentBet = parseInt(betInput.value);
createReels();
clearEffects();
spinButton.disabled = currentBalance < currentBet;